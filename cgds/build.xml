<?xml version="1.0"?>
<!--
	CGDS Ant Build Script.
	Author:  Ethan Cerami, cbio@MSKCC
-->

<project name="CGDS" default="compile" basedir=".">
    <!--  Environment Variables -->
    <property environment="env"/>

    <!--  Set CGDS Home -->
    <property name="cgds.home" value="${env.CGDS_HOME}"/>

    <!-- The build directory -->
    <!-- All files generated by ant go here -->
    <property name="build.dir"    value="${basedir}/build"/>

    <!-- The war build directory -->
    <!-- All generated war files go here -->
    <property name="war.dir" value="${build.dir}/war"/>

    <!-- The java source directory-->
    <property name="src.dir"      value="${basedir}/src"/>

    <!-- The web source directory -->
    <property name="web.dir"      value="${basedir}/web"/>

    <!-- The lib directory -->
    <!-- Contains all third-party JAR files, required for compilation -->
    <property name="lib.dir"       value="lib"/>

    <!-- The config directory-->
    <property name="config.dir"    value="config"/>

    <!-- The bin directory-->
    <property name="bin.dir"    value="${basedir}/bin"/>

    <!--  Build.properties File -->
  	<property file="build.properties"/>

    <!-- Servlet Container Properties -->
  	<property name="app.path"      value="/${app.name}"/>
  	<property name="manager.url"   value="http://localhost:8080/manager"/>

    <!-- junit dir -->
    <property name="junit.dir" value="${build.dir}/junit"/>

	<!-- ============= Custom Ant Task Definitions ======================= -->
    <taskdef name="install"
        classname="org.apache.catalina.ant.InstallTask"
        classpath="lib/ant/catalina-ant.jar"/>
    <taskdef name="list"
        classname="org.apache.catalina.ant.ListTask"
        classpath="lib/ant/catalina-ant.jar"/>
    <taskdef name="reload"
        classname="org.apache.catalina.ant.ReloadTask"
        classpath="lib/ant/catalina-ant.jar"/>
    <taskdef name="remove"
        classname="org.apache.catalina.ant.RemoveTask"
        classpath="lib/ant/catalina-ant.jar"/>
    <taskdef resource="checkstyletask.properties"
        classpath="lib/ant/checkstyle-all-3.0.jar"/>

    <!--  ============ Compilation Control Options ======================= -->
  	<property name="compile.debug"       value="true"/>
  	<property name="compile.deprecation" value="false"/>
  	<property name="compile.optimize"    value="true"/>

    <!-- ==================== Compilation Classpath ====================== -->
 	<path id="compile.classpath">
		<pathelement path="${build.dir}/WEB-INF/classes"/>
		<fileset dir="${lib.dir}">
       		 	<include name="*.jar"/>
		</fileset>
  	</path>

    <!-- ==================== Clean Target =============================== -->
    <target name="clean"
        description="Deletes all build files and starts fresh.">
        <delete dir="${build.dir}"/>
    </target>

    <!-- ==================== Compile Target ==============================-->
    <target name="compile" depends="prepare"
        description="Compile all Java source files.">
        <mkdir dir="${build.dir}/WEB-INF/classes"/>
        <javac srcdir="${src.dir}"
            destdir="${build.dir}/WEB-INF/classes"
            debug="${compile.debug}"
            deprecation="${compile.deprecation}"
            optimize="${compile.optimize}">
        <classpath refid="compile.classpath"/>
        </javac>

        <!-- Copy application resources -->
        <copy  todir="${build.dir}/WEB-INF/classes">
          <fileset dir="${src.dir}" excludes="**/*.java"/>
        </copy>

        <!-- Copy over all third-part libs -->
        <!-- Exclude servlet.jar See Servlet Spec 2.3, section 9.7.2 -->
        <copy todir="${build.dir}/WEB-INF/lib">
            <fileset dir="${lib.dir}">
                <include name="**/*.jar"/>
                <exclude name="servlet.jar"/>
            </fileset>
        </copy>
    </target>

    <!-- ==================== War Target ================================== -->
    <target name="war" depends="compile"
        description="Creates binary WAR distribution.">
        <mkdir dir="${war.dir}"/>
        <jar jarfile="${war.dir}/${app.name}.war"
             basedir="${build.dir}"/>
    </target>

    <!-- ==================== Install Target =============================== -->
    <!--

      The "install" target tells the specified Tomcat installation to dynamically
      install this web application and make it available for execution.  It does
      *not* cause the existence of this web application to be remembered across
      Tomcat restarts; if you restart the server, you will need to re-install all
      this web application.

      If you have already installed this application, and simply want Tomcat to
      recognize that you have updated Java classes (or the web.xml file), use the
      "reload" target instead.

      NOTE:  This target will only succeed if it is run from the same server that
      Tomcat is running on.

      NOTE:  This is the logical opposite of the "remove" target.

    -->
    <target name="install" depends="prepare, compile"
        description="Installs CGDS to local development servlet container.">
        <install url="${manager.url}"
            username="${manager.username}"
            password="${manager.password}"
            path="${app.path}"
            war="file://${build.dir}"/>
    </target>

    <!-- ====================== List Target ================================ -->
    <!--

      The "list" target asks the specified Tomcat 4 installation to list the
      currently running web applications, either loaded at startup time or
      installed dynamically.  It is useful to determine whether or not the
      application you are currently developing has been installed.

    -->
    <target name="list"
        description="Lists installed applications on servlet container">
        <list
            url="${manager.url}"
            username="${manager.username}"
            password="${manager.password}"/>
    </target>


    <!-- ==================== Prepare Target ============================== -->
    <!--

      The "prepare" target is used to create the "build" destination directory,
      and copy the static contents of your web application to it.  If you need
      to copy static files from external dependencies, you can customize the
      contents of this task.

      Normally, this task is executed indirectly when needed.

    -->
    <target name="prepare">

        <!-- Create build directories as needed -->
        <mkdir  dir="${build.dir}"/>
        <mkdir  dir="${build.dir}/WEB-INF"/>
        <mkdir  dir="${build.dir}/WEB-INF/classes"/>

        <!-- Copy static content of this web application -->
        <copy todir="${build.dir}">
          <fileset dir="${web.dir}"/>
        </copy>

        <!-- Force copy of web.xml -->
        <copy overwrite="yes" todir="${build.dir}/WEB-INF"
            file="${web.dir}/WEB-INF/web.xml"/>

        <!-- Copy external dependencies as required -->
        <mkdir  dir="${build.dir}/WEB-INF/lib"/>

        <!-- Prepare web.xml, based on build.properties -->
		<replace file="${build.dir}/WEB-INF/web.xml"
             token="db_host__value" value="${db.host}"
             summary="yes"/>
        <replace file="${build.dir}/WEB-INF/web.xml"
             token="db_name__value" value="${db.name}"
             summary="yes"/>
        <replace file="${build.dir}/WEB-INF/web.xml"
             token="db_user__value" value="${db.user}"
             summary="yes"/>
        <replace file="${build.dir}/WEB-INF/web.xml"
             token="db_password__value" value="${db.password}"
             summary="yes"/>

        <!-- Force copy of build.properties -->
        <copy overwrite="yes" todir="${build.dir}/WEB-INF/classes/org/mskcc/cgds/util"
            file="build.properties"/>
    </target>

    <!-- ==================== Reload Target =============================== -->
    <!--

      The "reload" target tells the specified Tomcat 4 installation to dynamically
      reload this web application, to reflect changes in the underlying classes or
      the "web.xml" deployment descriptor.

    -->
    <target name="reload" depends="compile"
        description="Reloads CGDS application on servlet container.">
        <reload url="${manager.url}"
           username="${manager.username}"
           password="${manager.password}"
           path="${app.path}"/>
    </target>


    <!-- ==================== Remove Target =============================== -->
    <!--

      The "remove" target tells the specified Tomcat 4 installation to dynamically
      remove this web application from service.

      NOTE:  This is the logical opposite of the "install" target.

    -->
    <target name="remove"
        description="Removes CGDS application on servlet container.">
        <remove url="${manager.url}"
           username="${manager.username}"
           password="${manager.password}"
           path="${app.path}"/>
    </target>

    <target depends="compile" description="Runs all JUnit Tests" name="test">
        <delete dir="${junit.dir}"/>
        <mkdir dir="${junit.dir}"/>
        <mkdir dir="${junit.dir}/reports"/>
        <junit printsummary="yes" fork="yes" haltonfailure="no" dir="${basedir}" failureproperty="junit_test_failed">
			<formatter type="brief" usefile="false"/>
			<formatter type="xml" />
			<batchtest fork="yes" todir="${junit.dir}">	
                <fileset dir="${src.dir}" includes="**/Test*.java" />
            </batchtest>
            <classpath refid="compile.classpath"/>
        </junit>
		<fail if="junit_test_failed" message="One or more JUnit  tests failed"/>
    </target>

</project>
